# This is my scratchpad for exploring the Task API. It uses VS Code's REST Client Plugin (https://marketplace.visualstudio.com/items?itemName=humao.rest-client)

@host = https://task.quatrixglobal.com
# @host = https://cors-proxy.kevinscud.workers.dev/?url=https://task.quatrixglobal.com
@task_id = task_2fmmoDZSgbfsEUpm3fz46lh7pMl
# @task_id = task_2fmmoECcrp0lQ0US8ECFAuVxbZq


# 1. List all tasks
# ---
# Returns a list of all tasks.
# Resource: GET /tasks


### (a) All tasks. EXPECT 200
GET {{host}}/tasks


### (b) 1 valid query param. EXPECT 200
GET {{host}}/tasks?per_page=20


### (c) 2 valid query params. EXPECT 200
GET {{host}}/tasks?page=2&per_page=10


### (d) Invalid query params. EXPECT 500
GET {{host}}/tasks?page=invalid&per_page=10


### (d) Out-of-range query params. EXPECT 200
GET {{host}}/tasks?page=100&per_page=100


###


# 2. Retrieve a task
# ---
# Retrieves a specific task using its ID.
# Resource: GET /tasks/{task_id}


### (a) Valid task_id. EXPECT 200
GET {{host}}/tasks/{{task_id}}


### (a) Invalid task_id. EXPECT 404
GET {{host}}/tasks/invalid_task_id


###


# 3. Create a task
# ---
# Creates a new task.
# Resource: POST /tasks


### Body: all keys. EXPECT 201
POST {{host}}/tasks
Content-Type: application/json

{
  "object": "task",
  "task_priority": "low",
  "status_id": "open",
  "subject": "Place Radio Advert",
  "description": "Develop and schedule a radio advertisement.",
  "due_date": "{{$datetime iso8601 2 y}}"
}


### Body: only required keys. EXPECT 201
POST {{host}}/tasks
Content-Type: application/json

{
  "task_priority": "high",
  "subject": "Place Another Radio Advert",
  "description": "Develop and schedule a radio advertisement."
}

### Body: missing/invalid required key. EXPECT 400
POST {{host}}/tasks
Content-Type: application/json

{
  "task_priority": "high",
  "subject": "",
  "description": "Develop and schedule a radio advertisement."
}


###


# 4. Start a task
# ---
# Changes the status of an open task to in_progress.
# Resource: POST /tasks/{task_id}/start_progress


### (a) Start an open task. EXPECT 200
POST {{host}}/tasks/{{task_id}}/start_progress


### (b) Start an already in_progress task. EXPECT 409
POST {{host}}/tasks/{{task_id}}/start_progress


### (c) Start a task with invalid task_id. EXPECT 404
POST {{host}}/tasks/invalid_task_id/start_progress


###


# 5. Stop a task
# ---
# Changes the status of an in-progress task to open
# Resource: POST /tasks/{task_id}/stop_progress


### (a) Stop an in_progress task. EXPECT 200
POST {{host}}/tasks/{{task_id}}/stop_progress


### (b) Stop an open task. EXPECT 409
POST {{host}}/tasks/{{task_id}}/stop_progress


# 6. Close a task
# ---
# Changes the status of an open or in-progress task to closed
# Resource: POST /tasks/{task_id}/close


### (a) Close an open or in_progress task. EXPECT 200
POST {{host}}/tasks/{{task_id}}/close


### (b) Close an already closed task. EXPECT 409
POST {{host}}/tasks/{{task_id}}/close


###


# 7. Reopen a task
# ---
# Changes the status of a closed task to open
# Resource: POST /tasks/{task_id}/reopen


### (a) Reopen a closed task. EXPECT 200
POST {{host}}/tasks/{{task_id}}/reopen


### (b) Reopen an already open task. EXPECT 409
POST {{host}}/tasks/{{task_id}}/reopen


###


# 8. Update a task
# ---
# Modifies an existing task
# Resource: PATCH /tasks/{task_id}


### (a) Body: subject, priority, description, and due date. EXPECT 200
PATCH {{host}}/tasks/{{task_id}}
Content-Type: application/json

{
  "task_priority": "low",
  "subject": "Place Another Radio Advert",
  "description": "Develop and schedule a radio advertisement.",
  "due_date": "{{$datetime iso8601 10 d}}"
}


###


# 9. Delete a task
# ---
# Deletes a specified task
# Resource: DELETE /tasks/{task_id}


### (a) Delete an exixting task. EXPECT 200
DELETE  {{host}}/tasks/{{task_id}}


### (b) Delete ean already deleted task. EXPECT 404
DELETE  {{host}}/tasks/{{task_id}}
